{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
\readonlydoc1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww26700\viewh12400\viewkind0
\hyphauto1\hyphfactor90
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \

\b \ul General Instruction:
\b0 \ulnone \
* Call initialise once on game launch.\
* set ExternalInterfaceHandler.Instance.ExternalBackGroundAds to 
\i eEXTERNAL_BackGround_FullAds.Deactivate
\i0  or 
\i eEXTERNAL_BackGround_FullAds.Activate
\i0 \
based on Game Requirement. Ex. like in gameplay ads should be deactivated so when gameplay start just set Deactivate state.\
\

\b \ul Build Distribution:
\b0 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803
\cf0 	1. Free:\
		- Ads\
		- Remove ads Button\
		- IAP	\
		- Social NW\
      		- More games link\
	2. Premium:\
		- No Ads\
		- No Remove ads Button\
	3. Custom:       \
        		-  No Remove ads Button\
		-  No InApp\
        		- No Social NW buttons        \
        		- No More games link\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 ->
\f1\i ExternalInterfaceHandler.Instance.BuildType
\f2\i0  will return the type of build needed. So based on that adjust Game Condition.\
-> While calling interstitial, pass the type(place dependent) for each call.\
Ex. Onlaunch - 1(Default)\
	OnPause - 2\
	OnGameOver -3
\f0 \
\
\

\b \ul MACOS:
\b0 \ulnone \
* Activate run in background from player setting\
\'97> call Initialisation on Game Start( first call of the game) \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803

\i \cf0 ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.Initialize);
\i0 \
\
1. Before loading InApp Page just call start loading screen and call back for inApp data..Disable current Screen buttons.\

\i ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.StartLoadingScreen);
\i0 \

\i ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.GetInAppData,"",GetInAppData);
\i0 \
\
2. check GetInApp Function response..\
\

\i void GetInAppData(eEXTERNAL_REQ_TYPE reqType , string requestedId , string receivedStatus)\
	\{\
		Debug.Log("GetInAppData()....Data Received_"+receivedStatus);\
		\
		switch(reqType)\
		\{\
			case eEXTERNAL_REQ_TYPE.GetInAppData:\
			if(receivedStatus == "true")\
			\{\
				// update currency gui text with stored player prefs string type.\
				// enable current screen button.\
				// use "kimberley Dynamic" for currency value available in resource folder.\
			\}\
			else\
			\{\
				// enable all button except inapp purchase button.\
				// leave currency value empty.\
			\}\
			ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.StopLoadingScreen);\
			break;\
		default:\
			Debug.Log("GetInAppData()....Invalid received Data");\
			break;\
		\}\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803

\i0 \cf0 \
3. inApp purchase button click\'85\
disable current screen button before calling these lines...\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803

\i \cf0 ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.StartLoadingScreen);\
ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.InAppConsumable,"1",InAppPurchase);
\i0 \
\
5. after call received for inApp..\
\

\i void InAppPurchase(eEXTERNAL_REQ_TYPE reqType , string requestedId , string receivedStatus)\
	\{\
		Debug.Log("InAppPurchase().....Data Received..."+receivedStatus);\
		\
		switch(reqType)\
		\{\
		case eEXTERNAL_REQ_TYPE.InAppConsumable:\
			if(receivedStatus == "true")\
			\{\
				switch(requestedId)\
				\{\
					case "1":\
					Debug.Log("InAppConsumable: Request 1 completed");\
					break;\
					case "2":\
					Debug.Log("InAppConsumable: Request 2 completed");\
					break;\
					case "3":\
					break;\
				\}\
			\}\
			else\
			\{\
				// purchase failed..\
			\}\
			// enable current screen button\
			ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.StopLoadingScreen,"",null);\
\
			break;\
		case eEXTERNAL_REQ_TYPE.InAppNonConsumable:\
			if(receivedStatus == "true")\
			\{\
				switch(requestedId)\
				\{\
					case "1":\
					Debug.Log("InAppNonConsumable: Request 1 completed");\
					break;\
					case "2":\
					Debug.Log("InAppNonConsumable: Request 1 completed");\
					break;\
					case "3":\
					break;\
				\}\
			\}\
			else\
			\{\
				// purchase failed.\
			\}\
			// enable current screen button\
			ExternalInterfaceHandler.Instance.SendRequest(eEXTERNAL_REQ_TYPE.StopLoadingScreen,"",null);\
\
			\
			break;\
		default:\
			Debug.Log("InAppPurchase()....Invalid received Data");\
			break;\
			\
		\}\
		\
	\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803

\i0 \cf0 \
}